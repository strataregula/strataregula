# StrataRegula Enhanced Benchmark CI Integration - Sample workflow patch
# This shows how to modify existing workflows to use the enhanced reporting

# BEFORE (existing workflow in bench-guard.yml):
# - name: Run performance benchmark
#   run: python scripts/bench_guard.py

# AFTER (enhanced reporting):
- name: Run StrataRegula benchmark with enhanced reporting
  id: strataregula-benchmark
  run: |
    echo "Starting StrataRegula enhanced benchmark suite..."
    
    # Run with health check first
    python scripts/bench_integration.py --health-check || echo "Health check warnings detected"
    
    # Run full benchmark with CI optimization
    python scripts/bench_integration.py --ci --format all
    
    # List generated artifacts
    python scripts/bench_integration.py --list-artifacts

- name: Upload enhanced StrataRegula artifacts
  if: always()
  uses: actions/upload-artifact@v4
  with:
    name: strataregula-benchmark-enhanced-${{ github.run_id }}
    path: |
      bench_guard*.json
      bench_guard*.md
      bench_guard*_console.txt
      bench_guard*_ci_summary.md
    retention-days: 30

- name: Generate StrataRegula PR comment
  if: github.event_name == 'pull_request' && always()
  uses: actions/github-script@v7
  with:
    script: |
      const fs = require('fs');
      
      // Use the Japanese markdown report if available
      const reportFile = fs.existsSync('bench_guard.md') ? 'bench_guard.md' : null;
      
      if (reportFile) {
        const summary = fs.readFileSync(reportFile, 'utf8');
        
        // Find existing StrataRegula benchmark comment
        const comments = await github.rest.issues.listComments({
          owner: context.repo.owner,
          repo: context.repo.repo,
          issue_number: context.issue.number,
        });
        
        const existingComment = comments.data.find(comment => 
          comment.body.includes('üèØ StrataRegula Benchmark Report')
        );
        
        const commentBody = `<!-- strataregula-benchmark-report -->\n${summary}\n\n---\n*Generated by enhanced StrataRegula benchmark suite*`;
        
        if (existingComment) {
          // Update existing comment
          await github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: existingComment.id,
            body: commentBody
          });
          console.log('Updated existing StrataRegula benchmark comment');
        } else {
          // Create new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: commentBody
          });
          console.log('Created new StrataRegula benchmark comment');
        }
      } else {
        console.log('No benchmark report found for PR comment');
      }

# Performance issue notification (optional enhancement)
- name: Notify on performance regression
  if: failure() && contains(steps.strataregula-benchmark.outputs.strataregula_benchmark_passed, 'false')
  uses: actions/github-script@v7
  with:
    script: |
      // Create issue or notification for performance regression
      const title = `Performance Regression Detected in PR #${{ github.event.number }}`;
      const body = `
      üö® **StrataRegula Performance Regression**
      
      PR #${{ github.event.number }} has introduced performance regressions.
      
      **Details:**
      - Branch: \`${{ github.head_ref }}\`
      - Commit: ${{ github.sha }}
      - Workflow: ${{ github.workflow }}
      
      **Next Steps:**
      1. Review benchmark artifacts in the workflow run
      2. Check the enhanced benchmark report (markdown format)
      3. Profile the affected components
      4. Consider optimizations or threshold adjustments
      
      **Artifacts:** [View Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      `;
      
      // You can uncomment this to create issues for regressions
      // await github.rest.issues.create({
      //   owner: context.repo.owner,
      //   repo: context.repo.repo,
      //   title: title,
      //   body: body,
      //   labels: ['performance', 'regression', 'strataregula']
      // });
      
      console.log('Performance regression detected - check artifacts for details');

# Alternative: Minimal integration for existing workflows
# Replace this line in existing bench-guard.yml:
#   python scripts/bench_guard.py
# With:
#   python scripts/bench_integration.py --legacy --ci

# Migration Strategies:
# 1. CONSERVATIVE: Use --legacy flag to keep existing behavior + add artifacts
# 2. PROGRESSIVE: Use --ci flag to get enhanced reporting without changing exit codes  
# 3. COMPREHENSIVE: Full integration with PR comments and health checks

# Environment variables for tuning:
# SR_ENHANCED_REPORTING=true    # Enable enhanced reporting by default
# SR_CI_FORMAT=markdown         # Set default CI format
# SR_HEALTH_CHECK=true         # Run health checks in CI