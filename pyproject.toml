[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "strataregula"
dynamic = ["version"]
description = "Layered Configuration Management with Strata Rules Architecture"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Strataregula Team", email = "team@strataregula.com"}
]
maintainers = [
    {name = "Strataregula Team", email = "team@strataregula.com"}
]
keywords = [
    "yaml", "configuration", "pattern", "compiler", "expansion", 
    "infrastructure", "automation", "cli", "streaming", "pipe",
    "strata", "layered", "hierarchical", "rules", "engine"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
    "Typing :: Typed"
]
requires-python = "==3.11.*"
dependencies = [
    "click>=7.0.0",          # より広い互換性
    "rich>=10.0.0",          # 2021年初期版から対応
    "pyyaml>=5.4.0",         # Python 3.8 確実対応
    "typing-extensions>=3.10.0",  # Python 3.8 対応
    "tomli>=1.2.0; python_version<'3.11'"  # TOML parsing for legacy support
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0"
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0"
]
performance = [
    "psutil>=5.7.0",         # メモリ・CPU監視用
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "pandas>=2.0.0",
    "jupyter>=1.0.0",
    "nbconvert>=7.0.0"
]
plugins = [
    "defusedxml>=0.7.1"  # For secure XML processing
]
api = [
    "requests>=2.28.0",  # For HTTP API data sources
    "httpx>=0.24.0"      # Alternative async HTTP client
]

[project.urls]
Homepage = "https://github.com/strataregula/strataregula"
Documentation = "https://strataregula.readthedocs.io/"
Repository = "https://github.com/strataregula/strataregula"
"Bug Tracker" = "https://github.com/strataregula/strataregula/issues"
"Discussions" = "https://github.com/strataregula/strataregula/discussions"
Changelog = "https://github.com/strataregula/strataregula/blob/main/CHANGELOG.md"
"Performance Benchmarks" = "https://strataregula.github.io/strataregula/benchmark.html"

[project.scripts]
sr = "strataregula.cli.main:main"
strataregula = "strataregula.cli.main:main"

[tool.setuptools]
package-dir = {"" = "."}
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["strataregula*"]
exclude = ["tests*", "examples*", "docs*", "benchmarks*", "scripts*", "TO_DELETE*"]

[tool.setuptools.dynamic]
version = {attr = "strataregula.__version__"}

[tool.setuptools.package-data]
strataregula = [
    "py.typed",
    "*.yaml",
    "*.yml", 
    "*.json",
    "templates/*.j2",
    "schemas/*.json"
]

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--cov=strataregula",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--strict-markers",
    "--strict-config"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests", 
    "performance: marks tests as performance tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests"
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["strataregula"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true

[[tool.mypy.overrides]]
module = [
    "yaml.*",
    "click.*",
    "psutil.*"  # Optional dependency
]
ignore_missing_imports = true

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF"  # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "PLR0913", # too many arguments
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
    "PLR0915", # too many statements (関数が長すぎる)
    "PLR2004", # magic values (マジックナンバー)
    "RUF003",  # 全角文字の問題（日本語コメント）
    "RUF002",  # 全角文字の問題（docstring）
    "UP038",   # isinstance の新しい構文（Python 3.10+）
    "UP035",   # typing の非推奨構文
    "UP045",   # 新しい型注釈構文
    "UP006",   # 新しい型注釈構文
    "UP007",   # 新しい型注釈構文
    "UP015",   # 不要なmode引数
    "UP017",   # datetime.UTC
    "B904",    # except句での例外処理
    "B905",    # zip()のstrict引数
    "B007",    # ループ制御変数の未使用
    "B018",    # 無用な属性アクセス
    "C401",    # 不要なジェネレータ
    "C4",      # 内包表記の問題
    "E401",    # 複数インポート
    "E712",    # 真偽値比較
    "E722",    # 裸のexcept
    "E731",    # lambda式の代入
    "F401",    # 未使用インポート
    "F403",    # star import
    "F405",    # star importからの名前
    "F541",    # プレースホルダーのないf-string
    "F811",    # 重複定義
    "F841",    # 未使用変数
    "I001",    # インポートブロックの順序
    "PLC0415", # トップレベル以外でのインポート
    "PLW1510", # subprocess.runのcheck引数
    "PLW2901", # ループ変数の上書き
    "PTH108",  # os.unlink
    "PTH117",  # os.path.isabs
    "PTH118",  # os.path.join
    "PTH120",  # os.path.dirname
    "PTH123",  # open()をPath.open()に
    "RUF006",  # asyncio.create_taskの戻り値
    "RUF012",  # 可変クラス属性の型注釈
    "RUF013",  # 暗黙のOptional
    "RUF015",  # next(iter())の使用
    "RUF022",  # __all__のソート
    "SIM102",  # 単一のif文
    "SIM103",  # 条件の直接返却
    "SIM105",  # contextlib.suppress
    "SIM118",  # dict.keys()の使用
    "TC001",   # 型チェックブロックでのインポート
    "TC003",   # 型チェックブロックでのインポート
    "ARG001",  # 未使用関数引数
    "ARG002",  # 未使用メソッド引数
    "ARG003",  # 未使用クラスメソッド引数
    "ARG005",  # 未使用lambda引数
    "E402",    # モジュールレベルでのインポート位置
    "E721",    # 型比較の問題
    "ERA001",  # コメントアウトされたコード
    "RUF001",  # 全角文字（日本語表示用）
    "B019",    # lru_cacheの警告
    "B023",    # ループ変数の束縛
    "SIM108",  # 三項演算子の使用
    "SIM113",  # enumerateの使用
    "PTH122",  # os.path.splitext
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # assert allowed in tests
    "ARG",     # unused arguments OK in tests
    "PLR2004", # magic values OK in tests
    "F401",    # unused imports OK in tests
    "F403",    # star imports OK in tests
    "F405",    # star import names OK in tests
    "F541",    # f-strings without placeholders OK in tests
    "F811",    # redefinition OK in tests
    "F841",    # unused variables OK in tests
    "I001",    # import order OK in tests
    "PLC0415", # imports not at top level OK in tests
    "PLR0915", # too many statements OK in tests
    "B007",    # loop control variables OK in tests
    "B904",    # exception handling OK in tests
    "B905",    # zip strict OK in tests
    "E401",    # multiple imports OK in tests
    "E712",    # boolean comparison OK in tests
    "E731",    # lambda assignment OK in tests
    "SIM105",  # contextlib.suppress OK in tests
    "UP035",   # typing deprecated OK in tests
    "UP006",   # typing deprecated OK in tests
    "UP007",   # typing deprecated OK in tests
    "UP017",   # datetime.UTC OK in tests
    "UP045",   # new type annotations OK in tests
]
"__init__.py" = [
    "F401",    # imported but unused (re-exports)
]

[tool.ruff.lint.isort]
known-first-party = ["strataregula"]
force-single-line = false
combine-as-imports = true

# Black compatibility (if needed)
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Golden Metrics Guard configuration
[tool.strataregula.golden-metrics]
mode = "fixed"  # Options: "fixed", "adaptive"
enabled = true
report_dir = "reports"

# History and adaptive mode settings (v0.4.0+)
history_retention_days = 90
min_samples_for_adaptive = 5
default_window_size = 20

[tool.strataregula.golden-metrics.thresholds]
# Performance regression thresholds (fixed mode)
latency = 1.05      # +5% tolerance for latency increase
throughput = 0.97   # -3% tolerance for throughput decrease  
error_rate = 1.02   # +2% tolerance for error rate increase
memory = 1.10       # +10% tolerance for memory usage increase
cache_hit_rate = 0.98  # -2% tolerance for cache hit rate decrease

[tool.strataregula.golden-metrics.critical]
# Critical metrics with stricter thresholds (fixed mode)
kernel_latency = 1.01     # Kernel operations must be fast
config_intern_ratio = 0.95  # Config interning efficiency

[tool.strataregula.golden-metrics.adaptive]
# Adaptive threshold settings (v0.4.0+)
sensitivity = "normal"  # Options: "strict", "normal", "relaxed"
strategy = "confidence_interval"  # Options: "confidence_interval", "percentile", "moving_average", "trend_adjusted"

# Per-metric adaptive configuration
[tool.strataregula.golden-metrics.adaptive.metrics]
latency_ms = { strategy = "trend_adjusted", sensitivity = "normal" }
throughput_rps = { strategy = "confidence_interval", sensitivity = "normal" }  
error_rate = { strategy = "percentile", sensitivity = "strict" }
memory_bytes = { strategy = "moving_average", sensitivity = "normal" }
hit_ratio = { strategy = "confidence_interval", sensitivity = "normal" }

# Legacy support - override specific metrics with fixed thresholds even in adaptive mode
[tool.strataregula.golden-metrics.adaptive.overrides]
# kernel_latency = 1.01  # Force fixed threshold for critical metrics