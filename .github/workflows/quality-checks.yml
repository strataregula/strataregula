name: Quality Assurance Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint-and-format:
    name: Linting and Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff
        
    - name: Ruff format check
      run: ruff format --check .
      
    - name: Ruff lint check
      run: ruff check --output-format=github .

  type-checking:
    name: Type Checking
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mypy
        pip install -e .
        
    - name: MyPy type checking
      run: mypy strataregula/ --strict

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit
        
    - name: Bandit security scan
      run: bandit -r strataregula/ -f json -o bandit-report.json
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio
        pip install -e .
        
    - name: Run tests with coverage
      run: |
        pytest tests/core/ --cov=strataregula.core --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.9'
      with:
        name: coverage-report
        path: htmlcov/

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-checking, security-scan, test-coverage]
    if: always()
    steps:
    - name: Check quality gate status
      run: |
        echo "Lint and Format: ${{ needs.lint-and-format.result }}"
        echo "Type Checking: ${{ needs.type-checking.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Test Coverage: ${{ needs.test-coverage.result }}"
        
        # Fail if any critical checks failed
        if [[ "${{ needs.lint-and-format.result }}" == "failure" ]]; then
          echo "❌ Linting failed - blocking merge"
          exit 1
        fi
        
        if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
          echo "❌ Security scan failed - blocking merge"
          exit 1
        fi
        
        # Warning for type checking (non-blocking in initial phase)
        if [[ "${{ needs.type-checking.result }}" == "failure" ]]; then
          echo "⚠️ Type checking failed - please fix when possible"
        fi
        
        # Warning for test coverage (non-blocking in initial phase)  
        if [[ "${{ needs.test-coverage.result }}" == "failure" ]]; then
          echo "⚠️ Test coverage issues - please improve when possible"
        fi
        
        echo "✅ Quality gate passed"
