name: Secret Audit
# StrataRegula セキュリティスキャン
# 機密情報の検知とセキュリティ監査を実行

on:
  pull_request:
    paths:
      - 'strataregula/**'
      - 'scripts/**'
      - 'tests/**'
      - '**/.env*'
      - '**/config.*'
      - '**/*.config.*'
      - '**/settings.*'
      - '**/secrets.*'
      - 'pyproject.toml'
      - 'requirements*.txt'
  push:
    branches: [ main, develop ]
    paths:
      - 'strataregula/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      scan_path:
        description: 'Path to scan (default: entire repository)'
        required: false
        default: '.'
      verbose:
        description: 'Verbose output'
        required: false
        default: 'false'

jobs:
  secret-detection:
    name: Detect secrets and credentials
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TZ: Asia/Tokyo
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install PowerShell
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Make secret-audit script executable
        run: chmod +x ./secret-audit.ps1

      - name: Run secret detection scan
        shell: pwsh
        run: |
          $scanPath = "${{ github.event.inputs.scan_path || '.' }}"
          $verboseFlag = "${{ github.event.inputs.verbose || 'false' }}" -eq 'true'
          
          Write-Host "🔍 Starting StrataRegula secret detection scan..." -ForegroundColor Cyan
          Write-Host "Scan path: $scanPath" -ForegroundColor Yellow
          Write-Host "Verbose mode: $verboseFlag" -ForegroundColor Yellow
          
          if ($verboseFlag) {
            ./secret-audit.ps1 -ScanPath $scanPath -Verbose
          } else {
            ./secret-audit.ps1 -ScanPath $scanPath
          }

      - name: Scan high-risk paths
        shell: pwsh
        run: |
          Write-Host "🎯 Scanning additional high-risk paths..." -ForegroundColor Cyan
          
          $highRiskPaths = @(
            'strataregula/core',
            'scripts',
            'tests/fixtures',
            '.env*',
            'config',
            'configs'
          )
          
          foreach ($path in $highRiskPaths) {
            if (Test-Path $path) {
              Write-Host "Scanning high-risk path: $path" -ForegroundColor Yellow
              ./secret-audit.ps1 -ScanPath $path
            } else {
              Write-Host "Path not found (OK): $path" -ForegroundColor Gray
            }
          }

      - name: Security audit summary
        if: always()
        run: |
          echo "## 🛡️ StrataRegula Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan completed at**: $(date '+%Y-%m-%d %H:%M:%S JST')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Scanned Components" >> $GITHUB_STEP_SUMMARY
          echo "- **Core Library**: strataregula/" >> $GITHUB_STEP_SUMMARY
          echo "- **Scripts**: scripts/" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Files**: tests/" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration Files**: .env, config, settings" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Detection Patterns" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub tokens (ghp_, gho_, ghu_, ghs_)" >> $GITHUB_STEP_SUMMARY
          echo "- AWS credentials (AKIA)" >> $GITHUB_STEP_SUMMARY
          echo "- OpenAI API keys (sk-)" >> $GITHUB_STEP_SUMMARY
          echo "- JWT tokens (eyJ)" >> $GITHUB_STEP_SUMMARY
          echo "- Private keys (-----BEGIN)" >> $GITHUB_STEP_SUMMARY
          echo "- Slack tokens (xoxb-)" >> $GITHUB_STEP_SUMMARY
          echo "- Bearer tokens" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Security Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "**Status**: ✅ **SECURE** - No secrets detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The StrataRegula codebase is clean of exposed credentials." >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status**: ❌ **SECURITY ISSUE** - Secrets detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Action Required**: Remove detected secrets before merging" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Remediation Steps**:" >> $GITHUB_STEP_SUMMARY
            echo "1. Remove or replace secrets with environment variables" >> $GITHUB_STEP_SUMMARY
            echo "2. Add patterns to .gitignore" >> $GITHUB_STEP_SUMMARY
            echo "3. Rotate exposed credentials immediately" >> $GITHUB_STEP_SUMMARY
            echo "4. Use GitHub Secrets for CI/CD workflows" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Security failure notification
        if: failure()
        run: |
          echo "🚨 StrataRegula Security Alert!"
          echo ""
          echo "Potential secrets or credentials have been detected in the codebase."
          echo "This poses a significant security risk to the StrataRegula ecosystem."
          echo ""
          echo "Immediate actions required:"
          echo "1. Review the scan output above for specific findings"
          echo "2. Remove or properly secure any detected secrets"
          echo "3. Rotate any potentially exposed credentials"
          echo "4. Ensure proper .gitignore configuration"
          echo ""
          echo "This PR will be blocked until security issues are resolved."
          exit 1